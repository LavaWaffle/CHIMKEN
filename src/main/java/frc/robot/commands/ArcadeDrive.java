// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import static frc.robot.Constants.DrivetrainConstants.*;
import frc.robot.classes.SPIKE293Utils;
import frc.robot.subsystems.Drivetrain;

/**
 *
 */
public class ArcadeDrive extends CommandBase {
    private final Drivetrain m_drivetrain;
    private final XboxController m_xboxcontroller;

    private double m_arcadeDeadband;
    private boolean m_forzaEnabled;
    private double m_forzaDeadband;
    private double m_velocityLimitPercentage;
    private double m_turningLimitPercentage;

    public ArcadeDrive(Drivetrain subsystem, XboxController xboxcontroller) {
        m_drivetrain = subsystem;
        addRequirements(m_drivetrain);
        m_xboxcontroller = xboxcontroller;

        m_velocityLimitPercentage = DEFAULT_MAX_VELOCITY_PERCENTAGE;
        m_turningLimitPercentage = DEFAULT_MAX_TURNING_SPEED;
        m_arcadeDeadband = DEFAULT_ARCADE_JOY_DEADBAND;
        m_forzaDeadband = DEFAULT_FORZA_DEADBAND;
        m_forzaEnabled = DEFAULT_FORZA_MODE;
        SmartDashboard.putNumber("Arcade Joy Deadband", m_arcadeDeadband);
        SmartDashboard.putNumber("Forza Deadband", m_forzaDeadband);
        SmartDashboard.putBoolean("Forza Mode", m_forzaEnabled);
        SmartDashboard.putNumber("Max Velocity Percentage", m_velocityLimitPercentage);
        SmartDashboard.putNumber("Max Turning Percentage", m_turningLimitPercentage);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double speed = -m_xboxcontroller.getLeftY();
        double turning = m_xboxcontroller.getRightX();
        arcadeDrive(speed, turning);
    }

    private void arcadeDrive(double velocity, double turning) {
        // Convert turning and speed to left right encoder velocity
        // double leftMotorOutput = velocity + turning;
        // double rightMotorOutput = velocity - turning;
        double leftMotorOutput = velocity;
        double rightMotorOutput = velocity;

        if (velocity >= 0) {
            if (turning >= 0) {
                double maxRight = 0.5 * turning;
                if (rightMotorOutput > maxRight) rightMotorOutput = maxRight;
            }
        }
        

        // Send to motors
        m_drivetrain.percentDrive(leftMotorOutput * 0.1, rightMotorOutput * 0.1);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drivetrain.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
